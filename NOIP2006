/*
# [NOIP2006 提高组] 能量项链
## 题目描述
在 Mars 星球上，每个 Mars 人都随身佩带着一串能量项链。在项链上有 $N$ 颗能量珠。能量珠是一颗有头标记与尾标记的珠子，这些标记对应着某个正整数。并且，对于相邻的两颗珠子，前一颗珠子的尾标记一定等于后一颗珠子的头标记。因为只有这样，通过吸盘（吸盘是 Mars 人吸收能量的一种器官）的作用，这两颗珠子才能聚合成一颗珠子，同时释放出可以被吸盘吸收的能量。如果前一颗能量珠的头标记为 $m$，尾标记为 $r$，后一颗能量珠的头标记为 $r$，尾标记为 $n$，则聚合后释放的能量为 $m \times r \times n$（Mars 单位），新产生的珠子的头标记为 $m$，尾标记为 $n$。
需要时，Mars 人就用吸盘夹住相邻的两颗珠子，通过聚合得到能量，直到项链上只剩下一颗珠子为止。显然，不同的聚合顺序得到的总能量是不同的，请你设计一个聚合顺序，使一串项链释放出的总能量最大。

## 输入格式
第一行是一个正整数 $N$（$4 \le N \le 100$），表示项链上珠子的个数。第二行是 $N$ 个用空格隔开的正整数，所有的数均不超过 $1000$。第 $i$ 个数为第 $i$ 颗珠子的头标记（$1 \le i \le N$），当 $i<N$ 时，第 $i$ 颗珠子的尾标记应该等于第 $i+1$ 颗珠子的头标记。第 $N$ 颗珠子的尾标记应该等于第 $1$ 颗珠子的头标记。
至于珠子的顺序，你可以这样确定：将项链放到桌面上，不要出现交叉，随意指定第一颗珠子，然后按顺时针方向确定其他珠子的顺序。

## 输出格式
一个正整数 $E$（$E\le 2.1 \times 10^9$），为一个最优聚合顺序所释放的总能量。

NOIP 2006 提高组 第一题
*/

#include<iostream>
using namespace std;
int n,f[301],a[301][301],maxn=-1;
int main()
{
	cin>>n;
	for(int i=1;i<=n;i++)
	{
		cin>>f[i];
		f[n+i]=f[i];
	}
	for(int i=2;i<2*n;i++)
	{
		for(int j=i-1;j>=1 && (i-j)<n;j--)
		{
			for(int k=j;k<i;k++)
			{
				if(a[j][i]<a[j][k]+a[k+1][i]+f[j]*f[k+1]*f[i+1])
					a[j][i]=a[j][k]+a[k+1][i]+f[j]*f[k+1]*f[i+1];
				if(a[j][i]>maxn)	maxn=a[j][i];
			}
		}
	}
	cout<<maxn;
	return 0;
}
